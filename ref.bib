@article{汤恩义2022领域软件工程专题前言,
  title={领域软件工程专题前言},
  author={汤恩义 and 江贺 and 陈俊洁 and 李必信 and 唐滨},
  journal={软件学报},
  number={005},
  pages={033},
  year={2022},
 abstract={软件是新一代信息技术的灵魂,是关系国民经济和社会全面发展的基础性,战略性产业.近年来,区块链,云计算,人工智能等许多新兴技术迅速发展,软件工程与工业控制,制造,科学计算,数值计算,物联网等各领域进一步加强融合,正引领并促进这些领域的高速发展.为了满足各个领域的相关要求,软件也对应呈现出许多新的特征,包括计算需求不断增强,实时性和可靠性的要求不断提高,对效率和安全性要求更为严格等,从而导致对应的领域软件在开发过程中面临新的挑战.},
}

@article{陈玲2019软件开发安全漏洞探究——评《软件安全开发》,
  title={软件开发安全漏洞探究——评《软件安全开发》},
  author={陈玲 and 夏汛},
  journal={中国安全科学学报},
  number={6},
  pages={1},
  year={2019},
 abstract={软件已经成为当今社会基础设施的基本要素,对人们的工作和生活产生了较为深远的影响.我国提出的建设网络强国的战略目标,使培养和造就高素质网络与信息安全人才队伍成为实现该目标的关键,也成为高校计算机与网络专业相关学者与专家高度重视的问题之一.《软件安全开发》一},
}

@article{曹刚2023基于,
  title={基于Qt开发软件的授权许可系统设计与实现},
  author={曹刚 and 宋润泉 and 刘承宗 and 陆文佳 and 姚庆璐},
  journal={计算技术与自动化},
  volume={42},
  number={1},
  pages={179-182},
  year={2023},
 abstract={针对当前软件盗版现象严重的问题,为保护软件开发商的利益,提出了一种授权许可系统设计方案.基于该方案开发出序列号软件,密钥软件,应用动态库,用户通过序列号软件获得序列号,软件开发商通过密钥软件用用户序列号生成License文件.同时可在密钥软件上根据需要设置软件的到期时间限制,运行时间限制,设备数量限制权限,最后生成密钥文件.在License文件和密钥文件的双重验证下,软件提高其安全性且大大提高其被破解的难度,对软件保护具有很高的商业价值.},
}

@article{何鹏2020面向群体协作开发的开源软件峭壁分析,
  title={面向群体协作开发的开源软件峭壁分析},
  author={何鹏 and 喻绿君},
  journal={计算机科学},
  volume={47},
  number={6},
  pages={8},
  year={2020},
 abstract={开源软件项目因门槛低,自由度高,在开发过程中存在进度缓慢,效率低下和项目质量偏低等问题;同时,软件峭壁(Software Cliff Wall)作为一种判定项目鲁棒性的依据,表现为软件开发过程中在短时间内完成远超过常规增量开发的一种代码贡献行为,是软件演化过程中可持续发展的一种潜在威胁.为了深入研究开源项目的开发过程,更准确地刻画软件演化,从而提高软件开发效率,分析软件峭壁的成因是一种行之有效的方法.实验以GitHub上9个时间跨度至少有5年的开源软件项目为研究对象,分别以月份和季度为周期,基于150000多个commits上开发者的关注与评论信息构建开发者合作网络(Deve-loper Collaboration Networks,DCN),将代码行数超过1万行的单次commit视为软件峭壁,并从网络规模,网络结构,网络质量3个方面,利用节点数,连边数,节点更新率,模块度,平均路径长度,平均度,节点入度指数,节点出度均值,多样性这9个度量指标来分析软件开发过程中DCN与软件峭壁的关系.研究结果表明:1)当开发团队规模偏小,且成员更新幅度较大时,容易形成软件峭壁;2)保持开发者之间良好的"小世界"特性,有助于避免峭壁的产生;3)以季度为周期来分析软件开发过程中DCN与软件峭壁的关系更为合适,且开发团队成员的组织来源多样化也会在一定程度上促进软件峭壁的产生.},
}

@article{王莹2024开源软件库生态治理技术研究综述,
  title={开源软件库生态治理技术研究综述:二十年进展},
  author={王莹 and 伍盈欣 and 高天 and 陈子莺 and 许畅 and 于海 and 张成志},
  journal={软件学报},
  number={002},
  pages={035},
  year={2024},
 abstract={在"人-机-物"三元融合,泛在计算的时代蓝海下,"开放多变""需求多样"和"场景复杂"的软件部署和运行环境对开源软件库生态的治理技术提出了更多需求和更高期望.为进一步推动构建可信软件供应链生态,围绕泛在计算模式,打造自主可控的技术体系,聚焦于开源软件库管理生态,收集近20多年来(2001–2023)发表于软件工程领域较高影响力的学术期刊和会议的348篇论文,对开源软件库生态治理技术的研究工作进行梳理.讨论开源软件库生态的建模与分析,演化与维护,质量保证和管理等方面的工作,总结研究现状,问题,挑战与趋势.},
}

@article{戈健2019基于计算机程序设计的排序问题分析,
  title={基于计算机程序设计的排序问题分析},
  author={戈健},
  journal={现代信息科技},
  number={6},
  pages={2},
  year={2019},
 abstract={近年来,随着我国社会经济的快速发展以及科学技术的不断进步,我国计算机信息技术也实现了飞速的发展,并且取得了显著的成就.在现代社会发展过程中,计算机信息技术发挥着尤为重要的作用,可以为人们的生活,生产带来巨大的便利.为了保证计算机信息技术的应用质量和效率,必须做好计算机程序设计工作,其中排序是设计中的重要组成部分.在计算机程序设计中,排序方式较为多样化,因此需要设计人员结合实际需求合理选择排序方式.本文对计算机程序设计中的排序问题进行了深入的分析,希望为相关计算机程序设计工作提供一些建议.},
}

@article{2022Software,
  title={Software Engineering for Secure Software - State of the Art: A Survey},
  author={ Jayaram, K R  and  Mathur, Aditya P. },
  year={2022},
 abstract={This report contains a survey of the state of the art in software engineering for secure software. Secure software is defined and techniques used in each phase of the software lifecycle to engineer the development of secure software are described. Also identified are open questions and areas where further research is needed.The survey reported here was undertaken to understand how the practice of software engineering blends with the requirement of secure software. This has resulted in a novel two-dimensional description of the relationship between the software lifecycle phases and techniques for satisfying security requirements. The report is organized around this rela- tionship.},
}

@book{2019Software,
  title={Software Engineering: A Practitioner's Approach 9th Edition},
  author={ Pressman, Roger S.  and  Maxim, Bruce R },
  publisher={Software Engineering: A Practitioner's Approach 9th Edition},
  year={2019},
 abstract={Software Engineering: A Practitioner's Approach (SEPA), Ninth Edition, represents a major restructuring and update of previous editions, solidifying the book's position as the most comprehensive guide to this important subject. This text is also available in Connect. Connect enables the professor to assign readings, homework, quizzes, and tests easily and automatically grades and records the scores of the student's work.},
}

@book{2019Proceedings,
  title={Proceedings of the 9th European software engineering conference held jointly with 11th ACM SIGSOFT international symposium on Foundations of software engineering},
  author={ Paakki, Jukka  and  Inverardi, Paola },
  publisher={Arto Salomaa: Mathematician, Computer Scientist, and Teacher},
  year={2019},
 abstract={The author explains Arto Salomaa's family background.},
}

@article{2021Software,
  title={Software Engineering Teamwork Data Understanding using an Embedded Feature Selection},
  author={ Beghoura, Mohamed Amine },
  journal={International Journal of Performability Engineering},
  volume={17},
  number={5},
  year={2021},
 abstract={Teamwork plays an essential role in determining the outcome of software engineering projects, especially when software is being developed by large teams in geographically distributed environments. To understand the successful development of these types of projects, it is important to assess the required teamwork skills that would help in resolving possible problems and avoiding failure. However, it is still not clear how to assess teamwork skills. In this paper, we propose an analytical framework based on a machine learning algorithm to study teamwork skills and factors that influence the success/failure of software engineering projects. For this purpose, we conduct our study on the Software Engineering Teamwork Assessment and Prediction (SETAP) dataset using a machine learning algorithm to extract the relevant features. The dataset provides quantitative data of team activity measures related to the software engineering process and the product at the different software development lifecycle phases. The results show that each of the software lifecycle phases requires different teamwork skills. The results demonstrate the efficiency of the approach; that has predicted team outcomes by accuracy score greater than 90% for process and product data.},
}

@book{2020SOFTWARE,
  title={SOFTWARE SYSTEMS ENGINEERING},
  author={ Kossiakoff, Alexander  and  Seymour, Samuel J.  and  Flanigan, David A.  and  Biemer, Steven M. },
  publisher={SOFTWARE SYSTEMS ENGINEERING},
  year={2020},
 abstract={This chapter focuses on software systems engineering and how software engineering relates to systems. It defines software by its three primary components: instructions, data structures, and documentation. One of the most fundamental differences between engineering software and engineering hardware is the abstract nature of software. One perspective that can be taken with respect to software engineering is that the software engineer is simply another design engineer responsible for a portion of the system's functionality. While many people have presented categories of software over the past decades, the chapter finds that most of them can be consolidated into three broad types: system software, embedded software, and application software. Four additional categories are presented: engineering/scientific, product﹍ine, web‐based, and artificial intelligence. The software development process can be resolved into four basic steps: analysis; design, including architectural, procedural, etc.; coding and unit test, also called implementation; and test, including integration and system test.},
}

@inproceedings{中国力学学会1990,
  title={第3届全国实验流体力学学术会议论文集},
  author={中国力学学会},
  year={1990},
  address={天津},
  publisher={**出版社},
  pages={20-24}
}

@techreport{WHO1970,
  title={World Health Organization. Factors Regulating the Immune Response: Report of WHO Scientific Group},
  year={1970},
  institution={WHO},
  address={Geneva}
}